{"version":3,"sources":["api/_base.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api/api.js","App.jsx","index.js"],"names":["get","url","fetch","then","response","json","result","data","TodoList","this","props","visibleTodos","onUserSelected","selectedUserId","completedFilter","searchQuery","onHandleChange","className","value","name","onChange","type","placeholder","map","todo","key","id","classNames","TodoList__item","completed","checked","readOnly","title","userId","button","onClick","React","PureComponent","defaultProps","CurrentUser","state","user","loadUser","prevProps","setState","onClearSelectUser","email","phone","Component","App","todos","selectUser","handleChange","event","target","getVisibleTodos","normalizedQuery","toLowerCase","filter","includes","filterCompletedTodos","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f2c1c25.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const get = url => fetch(`${BASE_URL}${url}`)\n  .then(response => response.json())\n  .then(result => result.data);\n","import React from 'react';\n\nimport './TodoList.scss';\n\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.PureComponent {\n  render() {\n    const {\n      visibleTodos,\n      onUserSelected,\n      selectedUserId,\n      completedFilter,\n      searchQuery,\n      onHandleChange,\n    } = this.props;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div>\n          <input\n            value={searchQuery}\n            name=\"searchQuery\"\n            onChange={onHandleChange}\n            type=\"text\"\n            placeholder=\"Type something for filtering todos\"\n          />\n\n          <select\n            name=\"completedFilter\"\n            value={completedFilter}\n            onChange={onHandleChange}\n          >\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames({\n                  TodoList__item: true,\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              >\n                <label>\n                  <input type=\"checkbox\" checked={todo.completed} readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                {todo.userId && (\n                  <button\n                    className={classNames({\n                      button: true,\n                      'TodoList__user-button': true,\n                      'TodoList__user-button--selected':\n                        selectedUserId === todo.userId,\n                    })}\n                    type=\"button\"\n                    onClick={() => onUserSelected(todo.userId)}\n                  >\n                    User&nbsp;#\n                    {todo.userId}\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  visibleTodos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n      userId: PropTypes.number,\n    }),\n  ),\n  selectedUserId: PropTypes.number.isRequired,\n  onUserSelected: PropTypes.func.isRequired,\n  onHandleChange: PropTypes.func.isRequired,\n  completedFilter: PropTypes.string.isRequired,\n  searchQuery: PropTypes.string.isRequired,\n};\n\nTodoList.defaultProps = {\n  visibleTodos: [],\n};\n","import React from 'react';\n\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\n\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    this.loadUser();\n  }\n\n  loadUser() {\n    getUser(this.props.userId)\n      .then((user) => {\n        this.setState({ user });\n      });\n  }\n\n  render() {\n    const { userId, onClearSelectUser } = this.props;\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {userId}\n          </span>\n        </h2>\n\n        {!user ? (<p>Loading...</p>) : (\n          <>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </>\n        )}\n\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => onClearSelectUser(0)}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClearSelectUser: PropTypes.func.isRequired,\n};\n","import { get } from './_base';\n\nexport const getTodos = () => get('/todos');\n\nexport const getUser = userId => get(`/users/${userId}`);\n","import React from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { getTodos } from './api/api';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    searchQuery: '',\n    completedFilter: 'all',\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({\n          todos,\n        });\n      });\n  }\n\n  selectUser = (selectedUserId) => {\n    this.setState({ selectedUserId });\n  }\n\n  handleChange = (event) => {\n    const { value, name } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  getVisibleTodos = (todos, searchQuery) => {\n    const normalizedQuery = searchQuery.toLowerCase();\n\n    return todos.filter(todo => todo.title\n      && todo.title.toLowerCase().includes(normalizedQuery));\n  }\n\n  filterCompletedTodos = (todos, completedFilter) => todos.filter(todo => (\n    completedFilter === 'completed'\n      ? todo.completed\n      : !todo.completed\n  ))\n\n  render() {\n    const { todos, selectedUserId, searchQuery, completedFilter } = this.state;\n\n    let visibleTodos = this.getVisibleTodos(todos, searchQuery);\n\n    if (completedFilter !== 'all') {\n      visibleTodos = this.filterCompletedTodos(visibleTodos, completedFilter);\n    }\n\n    return visibleTodos.length > 0 ? (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            searchQuery={searchQuery}\n            completedFilter={completedFilter}\n            visibleTodos={visibleTodos}\n            selectedUserId={selectedUserId}\n            onHandleChange={this.handleChange}\n            onUserSelected={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClearSelectUser={this.selectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    ) : (<p>Loading...</p>);\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}